import React, { Component } from 'react'
import Router from 'next/router'

class CaseList extends Component {
  constructor(props) {
    super(props)

    this.state = {
      projs: [],
      display: 999*6
    }

    this.top
    this.scrolling = false

    this.tilt = 100

    this.touch = false
    this.pos = [0,0]

  }

  componentDidMount() {
    window.addEventListener('mousemove', function (event) {
      event.stopPropagation();
    }, true);

    document.addEventListener('touchstart', (e) => this.touchStart(e))
    document.addEventListener('touchend', () => {this.touch = false})
    document.addEventListener('touchmove', (e) => this.touchMove(e))

    let projs = []
    this.props.shows.forEach(i => {
      projs.push(i)
    })
    this.setState({projs}, () => {
      let projsDom = []

      document.querySelectorAll('.proj-wrapper').forEach(i => {
        projsDom.push(i)
        i.style.top = window.innerHeight/2 + 'px'
      })
      this.top = projsDom[0]
      document.querySelector('.top-left').innerHTML = `${this.state.display%projsDom.length + 1}/${projsDom.length}`
      this.top.style.zIndex = 102;
    })

    window.addEventListener('resize', () => {
      document.querySelectorAll('.proj-wrapper').forEach(i => {
        i.style.top = window.innerHeight/2 + 'px'
      })
    })

  }

  componentWillUnmount() {
    document.removeEventListener('touchstart', (e) => this.touchStart(e))
    document.removeEventListener('touchend', () => {this.touch = false})
    document.removeEventListener('touchmove', (e) => this.touchMove(e))
  }

  touchStart(e) {
    this.pos = [0,0]
    this.touch = true
    this.pos[1] = e.touches[0].clientY
  }

  touchMove(e) {
    if(e.touches[0].clientY - this.pos[1] > 50 && this.touch) {
      this.touch = false
      this.wheel(-1)
    } else if(e.touches[0].clientY - this.pos[1] < -50 && this.touch) {
      this.touch = false
      this.wheel(1)
    }
  }

  wheel = (e) => {

    if(!this.scrolling){
      const dir = e;

      this.scrolling = true;

      let display = this.state.display
      display += dir
      this.setState({display})
      let length = this.state.projs.length
      document.querySelector('.top-left').innerHTML = `${(length-(display%length))%length + 1}/${this.state.projs.length}`

      setTimeout(() => {
        this.scrolling = false
      },500)

    }
  }


  goto(id) {

    Router.push('/p/[id]',`/p/${id}`).then(() => window.scrollTo(0, 0))

  }

  //got to next
  next() {
    let length = this.state.projs.length
    let display = this.state.display
    display--
    document.querySelector('.top-left').innerHTML = `${(length-(display%length))%length + 1}/${this.state.projs.length}`
    this.setState({display})
  }

  renderThumb(thumb) {
    if(thumb){
      if(thumb.fields.file.contentType === 'video/mp4') {

        return (
          <div className='thumb' style={{display: 'inline-block',verticalAlign: 'top', marginLeft: '20px'}}>
            <video
              muted playsInline loop autoPlay
              style={{
                width:thumb.fields.description.split(',')[0]*.5+'px',
              }}
            >
              <source src={thumb.fields.file.url} type={thumb.fields.file.contentType}/>
            </video>
          </div>
        )

      } else {

        return (
          <div className='thumb' style={{display: 'inline-block',verticalAlign: 'top', marginLeft: '20px'}}>
            <img
              src={thumb.fields.file.url}
              style={{
                width:thumb.fields.description.split(',')[0]*.5+'px',
              }}
            />
          </div>
        )

      }
    }

  }

  render() {
    return(
      <div>
      <style jsx>{`
        .wrapperGrid {

        }

        .next {
          width: 100vw;
          height: 100vh;
          position: fixed;
          left: 0;
          top: 0;
          z-index: 101;
        }

        .proj-hide {
          top: 200vh;
          left: 200vw;
        }

        .thumbs {
          text-align: right;
        }

        .proj-wrapper {
          font-family: roc-grotesk, sans-serif;
          font-weight: 400;
          font-style: normal;

          width: calc(100vw - 40px);
          height: 60vh;
          transform: translate(-50%, -50%);
          position: fixed;
          vertical-align: top;
          display: inline-block;
          font-size: 30px;
          line-height: 30px;
          left: 50vw;
          transition: opacity .5s;

          .proj-trans {
            width: calc(100vw - 40px);
            height: 60vh;
            padding: 20px;
            background-color: #f2f2f2;
            box-sizing: border-box;
            transition: transform .5s;

            .thumb {
              display: inline;
              vertical-align: top;
            }

            .title {
              text-transform: uppercase;
              margin: 0 0 20px;
            }

            .detail {
              margin: 20px 0;
            }

            .content-wrapper {
              width: 100%;
              height: 60vh;
              position: relative;

              .genre {
                position: absolute;
                bottom: 14px;
                left: 0;
                font-size: 20px;
              }
              .time {
                position: absolute;
                bottom: 30px;
                right: 0;
                font-size: 20px;
              }
            }
          }

        }





      `}</style>

        <div className='next' onClick={() => this.next()}></div>
          <div className='wrapperGrid'>
              {
                this.state.projs.map((proj,index) => {
                  let order = (index+this.state.display)%this.state.projs.length
                  let length = this.state.projs.length
                  return (
                    <div
                      style = {{
                        zIndex: order === 0
                          ? 102
                          : order === length - 1
                          ? 103
                          : 50-order
                        ,
                        opacity: order === length - 2 || order === length - 1
                          ? 0
                          : 1
                        ,
                        pointerEvents: order === length - 1
                          ? 'none'
                          : 'auto'
                      }}
                      key={index}
                      order={order}
                      className='proj-wrapper link'
                      onClick={() => this.goto(proj.fields.id)}
                    >
                      <div className='proj-trans' style={
                        order === length-1
                        ? {
                          transform: `
                            translateY(60px)
                            scale(1.1)
                          `,
                          backgroundColor: `rgba(239,239,239)`
                          }
                        : {
                          transform: `
                            translateY(-${Math.pow(order,.8)*50}px)
                            scale(${(-Math.pow(order,1.2)+10)/10})
                          `,
                          backgroundColor: `rgba(${239-order*15},${239-order*15},${239-order*15})`,
                          boxShadow: '0px 10px 20px rgba(0,0,0,.3)'
                          }
                        }>
                          <div className='content-wrapper'>
                            <div className='title'>
                              {
                                proj.fields.title
                              }
                            </div>
                            <div className='thumbs'>
                            {
                              this.renderThumb(proj.fields.thumbnails[0])
                            }
                            {
                              this.renderThumb(proj.fields.thumbnails[1])
                            }
                            </div>
                            <div className='detail'>
                              {
                                proj.fields.detail
                              }
                            </div>
                            <div className='time'>
                              @{2020 - proj.fields.time === 0 ? 'this year':' ' + (2020 - proj.fields.time) + ' year(s) ago'}
                            </div>
                          </div>

                      </div>
                    </div>
                  )
                })
              }
          </div>

      </div>
    )
  }
}

export default CaseList;
